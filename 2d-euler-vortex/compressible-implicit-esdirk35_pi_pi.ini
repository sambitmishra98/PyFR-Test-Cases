[backend]
precision = double

[constants]
gamma = 1.4
S = 13.5    ; Strength
M = 0.4     ; Mach number
R = 1.5     ; Radius

[solver]
system = euler
order = 3

[solver-time-integrator]
formulation = dual

scheme = esdirk35
controller = pi
tstart = 0.0
tend = 100
dt = 0.05

pseudo-scheme = rk45
pseudo-controller = local-pi
pseudo-dt = 0.005
pseudo-niters-min  = 1
pseudo-niters-max  = 100
pseudo-resid-norm  = l2
pseudo-resid-tol   = 1e-4
pseudo-resid-tol-p = 1e-3
atol               = 1e-6
rtol               = 1e-6

pseudo-dt-min-fact = 0.0001
pseudo-dt-max-fact = 5

; [solver-dual-time-integrator-multip]
; pseudo-dt-fact = 1.75
; cycle = [(3, 1), (2, 1), (1, 1), (0, 2), (1, 1), (2, 1), (3, 4)]

[solver-interfaces]
riemann-solver = rusanov

[solver-interfaces-line]
flux-pts = gauss-legendre

[solver-elements-quad]
soln-pts = gauss-legendre

[soln-plugin-nancheck]
nsteps = 1

[soln-plugin-residual]
nsteps = 1
file = esdirk35_res.csv
header = true

[soln-plugin-integrate]
nsteps = 1 
file = esdirk35_int_pi_pi.csv
header = true
quad-deg = 9

int-E = rho*(u*u + v*v)

[soln-plugin-pseudostats]
flushsteps = 1
file = esdirk35_pseudo_pi_pi.csv
header = true

; [soln-plugin-pseudodtstats]
; flushsteps = 1
; file = pseudodt_esdirk35_pi_pi_more.csv
; header = true
; abstraction = 3

; [soln-plugin-writer]
; dt-out = 1.0
; basedir = .
; basename = euler-vortex
 
[soln-ics]
f = ((1 - x*x - y*y)/(2*R*R))
rho = pow(1 - S*S*M*M*(gamma - 1)*exp(2*%(f)s)/(8*pi*pi), 1/(gamma - 1))
u = S*y*exp(%(f)s)/(2*pi*R)
v = 1 - S*x*exp(%(f)s)/(2*pi*R)
p = 1/(gamma*M*M)*pow(1 - S*S*M*M*(gamma - 1)*exp(2*%(f)s)/(8*pi*pi), gamma/(gamma - 1))
